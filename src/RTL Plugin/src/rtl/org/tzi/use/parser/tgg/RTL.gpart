/*
 * USE - UML based specification environment
 * Copyright (C) 1999-2004 Mark Richters, University of Bremen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *import org.tzi.use.parser.gratra.ast.*;
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  
 */
 
 /* @author hanhdd*/
 
header { 
package org.tzi.use.parser.tgg;
}

// ------------------------------------
//  RTL parser
// ------------------------------------

{
import org.tzi.use.parser.*;
import org.tzi.use.parser.ocl.*;
import org.tzi.use.parser.use.*;
import org.tzi.use.parser.tgg.ast.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
}

class GRTLParser extends GUSEParser;
options {
	exportVocab = GRTL;
	defaultErrorHandler = true;
	buildAST = false;
	k=7;
}

// grammar start

/* ------------------------------------
  tggRuleCollection ::= 
    ["transformation" id]
    {tggRuleDefinition}
*/
tggRuleCollection returns [ASTTggRuleCollection n]
{ 
    ASTTggRule tggRule = null;
    n = null;
}
:
    "transformation" name:IDENT { n = new ASTTggRuleCollection(); }
    ( tggRule=tggRuleDefinition { n.addTggRule(tggRule); } )*
    EOF
;

/* ------------------------------------
  tggRuleDefinition ::= 

*/

tggRuleDefinition returns [ASTTggRule n]
{ 
	ASTRule sourceRule = null;
	ASTRule targetRule = null;
	ASTCorrRule corrRule = null;
	boolean isDeletingRule = false;
	n = null;
}
:
	"rule" name:IDENT
	("mode" "EXPLICIT"{isDeletingRule = true;})?
	"checkSource"
	sourceRule = ruleDefinition
	"checkTarget"
	targetRule = ruleDefinition
	"checkCorr"
	corrRule = corrRuleDefinition
	"end"
	{n = new ASTTggRule((MyToken) name, sourceRule,targetRule,corrRule,isDeletingRule);}
;	

/* ------------------------------------
  ruleDefinition ::= 
*/

ruleDefinition returns [ASTRule n]
{ 
	ASTPattern lhs = null;
	ASTPattern rhs = null;
	n = null;
}
:
	LPAREN
		lhs = patternDefinition
	RPAREN  LBRACE
		rhs = patternDefinition
	RBRACE {n = new ASTRule(lhs,rhs);}
;

/* ------------------------------------
  corrRuleDefinition ::= "mode" "NONDELETING"|"EXPLICIT"
*/

corrRuleDefinition returns [ASTCorrRule n]
{ 
	ASTExtPattern lhs = null;
	ASTExtPattern rhs = null;
	n = null;
}
:
	LPAREN
		lhs = corrPatternDefinition
	RPAREN  LBRACE
		rhs = corrPatternDefinition
	RBRACE 
	{n = new ASTCorrRule(lhs,rhs);}
;

/* ------------------------------------
   patternDefinition ::= 
*/

patternDefinition returns [ASTPattern n]
{ 
	ASTObject object = null;
	ASTLink link = null;
	ASTCondition condition = null;
	n= new ASTPattern();
}
:
	(object = objectDefinition{n.addObject(object);})*
	(link = linkDefinition{n.addLink(link);})*
	(condition = conditionDefinition{n.addCondition(condition);})*
;	

/* ------------------------------------
  corrPatternDefinition ::= 
*/

corrPatternDefinition returns [ASTExtPattern n]
{ 
	ASTObject object = null;
	ASTLink link = null;
	ASTCorrLink corrLink = null;
	ASTCondition condition = null;
	n = new ASTExtPattern();
}
:	
	(object = objectDefinition{n.addObject(object);})*
	(corrLink = corrLinkDefinition{n.addCorrLink(corrLink);})*
	(link = linkDefinition{n.addLink(link);})*
	(className:IDENT COLON COND_EXPR)*
	(condition = conditionDefinition{n.addCondition(condition);})*
;	

/* ------------------------------------
  objectDefinition ::= 
*/

objectDefinition returns [ASTObject n]
{ 
	n = null;
	
}
:
	objectName:IDENT COLON
	className:IDENT {n = new ASTObject((MyToken) objectName, (MyToken) className);}
;

/* ------------------------------------
  linkDefinition ::= 
*/

linkDefinition returns [ASTLink n]
{ 
	n = null;	
}
:
	LPAREN obj1:IDENT COMMA obj2:IDENT RPAREN COLON
	assocName:IDENT {n = new ASTLink((MyToken)obj1, (MyToken)obj2, (MyToken) assocName);}
;

/* ------------------------------------
  conditionDefinition ::= 
*/

conditionDefinition returns [ASTCondition n]
{
	n=null;
}
: 
	cond:COND_EXPR{n = new ASTCondition((MyToken) cond);}
;

/* ------------------------------------
  corrLinkDefinition ::=  sequence('(', zero_or_one(sequence('(',ident,')')), ident, ',',zero_or_one(sequence('(',ident,')')),ident, ')', 
					zero_or_one(sequence('as','(',ident, ',', ident,')')),                                        
					'in', ident, ':', ident ) 					
*/

corrLinkDefinition returns [ASTCorrLink n]
{ 
	MyToken newSourceClass=null;
	MyToken newTargetClass=null;
	MyToken sourceRole=null;
	MyToken targetRole=null;
	n = null;
}
:
	LPAREN 
	(LPAREN clsName1:IDENT RPAREN {newSourceClass = (MyToken)clsName1;} )?
	objS:IDENT COMMA
	(LPAREN clsName2:IDENT RPAREN {newTargetClass = (MyToken)clsName2;} )?
	objT:IDENT RPAREN ("as" LPAREN role1:IDENT COMMA role2:IDENT RPAREN {sourceRole = (MyToken)role1;targetRole = (MyToken)role2;})?
	"in" objCorr:IDENT COLON corrClass:IDENT 
	{ 	
		n = new ASTCorrLink((MyToken) objS, (MyToken) objT, (MyToken) objCorr, (MyToken) corrClass);
		if(newSourceClass != null){
			n.addNewSourceClass(newSourceClass);
		}
		if(newTargetClass != null){
			n.addNewTargetClass(newTargetClass);		
		}
		if(sourceRole != null){
			n.addSourceRole(sourceRole);
		}
		if(sourceRole != null){
			n.addTargetRole(targetRole);
		}
	}
;
// ------------------------------------
//  RTL Lexer
// ------------------------------------

{
	import org.tzi.use.parser.MyToken;
	import org.tzi.use.parser.ParseErrorHandler;
	import java.io.PrintWriter;
	import org.tzi.use.util.Log;
	import org.tzi.use.util.StringUtil;
}
class GRTLLexer extends GUSELexer;
options {
	importVocab = GRTL;
	k = 2;
}

COND_EXPR
:	
    ('[') (~(']'))* (']')
    ;
    
protected
VOCAB:	
    '\3'..'\377'
    ;
